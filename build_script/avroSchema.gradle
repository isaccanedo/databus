final Configuration dataAvroConfig = project(':data-avro').configurations.default
final Configuration dataConfig = project(':data').configurations.default

project.sourceSets.all { SourceSet sourceSet ->
  final inputDataSchemaDirPath = "src${File.separatorChar}${sourceSet.name}${File.separatorChar}pegasus"
  final String outputDirPath = "src${File.separatorChar}${sourceSet.name}GeneratedAvroSchema${File.separatorChar}avro"

  final FileTree inputDataSchemaFiles = project.fileTree(dir: inputDataSchemaDirPath, includes: ["**${File.separatorChar}*.pdsc"])
  if (inputDataSchemaFiles.empty)
  {
    return;
  }

  project.mkdir(outputDirPath)

  final Task generateAvroSchemaTask = project.task(sourceSet.name + 'GenerateAvroSchema', type: JavaExec) {
    main = 'com.linkedin.data.avro.generator.AvroSchemaGenerator'
    classpath = dataAvroConfig + dataAvroConfig.allArtifacts.files + dataConfig + dataConfig.allArtifacts.files
    args outputDirPath
    args inputDataSchemaFiles
    systemProperties(['generator.resolver.path': inputDataSchemaDirPath])
  }

  project.tasks[sourceSet.getTaskName('', 'jar')].dependsOn(generateAvroSchemaTask)
}