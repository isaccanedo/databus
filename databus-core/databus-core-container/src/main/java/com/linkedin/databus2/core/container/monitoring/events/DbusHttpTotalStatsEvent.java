/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.databus2.core.container.monitoring.events;
/*
 *
 * Copyright 2013 LinkedIn Corp. All rights reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
*/


@SuppressWarnings("all")
/** Total inbound or outbound databus http statistics */
public class DbusHttpTotalStatsEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"DbusHttpTotalStatsEvent\",\"namespace\":\"com.linkedin.databus.monitoring.events\",\"fields\":[{\"name\":\"ownerId\",\"type\":\"int\",\"doc\":\"The id of the owner that generated the event\"},{\"name\":\"timestampLastResetMs\",\"type\":\"long\",\"doc\":\"unix timestamp of the last reset() call\"},{\"name\":\"timeSinceLastResetMs\",\"type\":\"long\",\"doc\":\"time in ms since the last reset() call\"},{\"name\":\"dimension\",\"type\":\"string\",\"doc\":\"dimension\"},{\"name\":\"numSourcesCalls\",\"type\":\"int\",\"doc\":\"number of /sources calls\"},{\"name\":\"numRegisterCalls\",\"type\":\"int\",\"doc\":\"number of /register calls\"},{\"name\":\"numStreamCalls\",\"type\":\"long\",\"doc\":\"number of /stream calls\"},{\"name\":\"numPeers\",\"type\":\"int\",\"doc\":\"number of distinct peers that have ever connected\"},{\"name\":\"timeStreamCallsMs\",\"type\":\"long\",\"doc\":\"total time to run stream calls\"},{\"name\":\"minStreamWinScn\",\"type\":\"long\",\"doc\":\"the minimum requested window scn sent or received\"},{\"name\":\"maxStreamWinScn\",\"type\":\"long\",\"doc\":\"the maximum requested window scn sent or received\"},{\"name\":\"numErrStreamCalls\",\"type\":\"long\",\"doc\":\"number of erroneous /stream calls\"},{\"name\":\"numErrInvalidParamsStreamCalls\",\"type\":\"long\",\"doc\":\"number of erroneous /stream calls with invalid req params \"},{\"name\":\"numErrScnNotFoundStreamCalls\",\"type\":\"long\",\"doc\":\"number of erroneous /stream calls when req scn was not found\"},{\"name\":\"numErrRegisterCalls\",\"type\":\"int\",\"doc\":\"number of erroneous /register calls\"},{\"name\":\"numErrInvalidParamsRegisterCalls\",\"type\":\"int\",\"doc\":\"number of erroneous /register calls with invalid req params\"},{\"name\":\"numErrSourcesCalls\",\"type\":\"int\",\"doc\":\"number of erroneous /sources calls\"},{\"name\":\"numErrInvalidParamsSourcesCalls\",\"type\":\"int\",\"doc\":\"number of erroneous /sources calls with invalid req params\"},{\"name\":\"mastershipStatus\",\"type\":\"int\",\"doc\":\"mastership status\"}]}");
  /** The id of the owner that generated the event */
  public int ownerId;
  /** unix timestamp of the last reset() call */
  public long timestampLastResetMs;
  /** time in ms since the last reset() call */
  public long timeSinceLastResetMs;
  /** dimension */
  public java.lang.CharSequence dimension;
  /** number of /sources calls */
  public int numSourcesCalls;
  /** number of /register calls */
  public int numRegisterCalls;
  /** number of /stream calls */
  public long numStreamCalls;
  /** number of distinct peers that have ever connected */
  public int numPeers;
  /** total time to run stream calls */
  public long timeStreamCallsMs;
  /** the minimum requested window scn sent or received */
  public long minStreamWinScn;
  /** the maximum requested window scn sent or received */
  public long maxStreamWinScn;
  /** number of erroneous /stream calls */
  public long numErrStreamCalls;
  /** number of erroneous /stream calls with invalid req params  */
  public long numErrInvalidParamsStreamCalls;
  /** number of erroneous /stream calls when req scn was not found */
  public long numErrScnNotFoundStreamCalls;
  /** number of erroneous /register calls */
  public int numErrRegisterCalls;
  /** number of erroneous /register calls with invalid req params */
  public int numErrInvalidParamsRegisterCalls;
  /** number of erroneous /sources calls */
  public int numErrSourcesCalls;
  /** number of erroneous /sources calls with invalid req params */
  public int numErrInvalidParamsSourcesCalls;
  /** mastership status */
  public int mastershipStatus;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ownerId;
    case 1: return timestampLastResetMs;
    case 2: return timeSinceLastResetMs;
    case 3: return dimension;
    case 4: return numSourcesCalls;
    case 5: return numRegisterCalls;
    case 6: return numStreamCalls;
    case 7: return numPeers;
    case 8: return timeStreamCallsMs;
    case 9: return minStreamWinScn;
    case 10: return maxStreamWinScn;
    case 11: return numErrStreamCalls;
    case 12: return numErrInvalidParamsStreamCalls;
    case 13: return numErrScnNotFoundStreamCalls;
    case 14: return numErrRegisterCalls;
    case 15: return numErrInvalidParamsRegisterCalls;
    case 16: return numErrSourcesCalls;
    case 17: return numErrInvalidParamsSourcesCalls;
    case 18: return mastershipStatus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ownerId = (java.lang.Integer)value$; break;
    case 1: timestampLastResetMs = (java.lang.Long)value$; break;
    case 2: timeSinceLastResetMs = (java.lang.Long)value$; break;
    case 3: dimension = (java.lang.CharSequence)value$; break;
    case 4: numSourcesCalls = (java.lang.Integer)value$; break;
    case 5: numRegisterCalls = (java.lang.Integer)value$; break;
    case 6: numStreamCalls = (java.lang.Long)value$; break;
    case 7: numPeers = (java.lang.Integer)value$; break;
    case 8: timeStreamCallsMs = (java.lang.Long)value$; break;
    case 9: minStreamWinScn = (java.lang.Long)value$; break;
    case 10: maxStreamWinScn = (java.lang.Long)value$; break;
    case 11: numErrStreamCalls = (java.lang.Long)value$; break;
    case 12: numErrInvalidParamsStreamCalls = (java.lang.Long)value$; break;
    case 13: numErrScnNotFoundStreamCalls = (java.lang.Long)value$; break;
    case 14: numErrRegisterCalls = (java.lang.Integer)value$; break;
    case 15: numErrInvalidParamsRegisterCalls = (java.lang.Integer)value$; break;
    case 16: numErrSourcesCalls = (java.lang.Integer)value$; break;
    case 17: numErrInvalidParamsSourcesCalls = (java.lang.Integer)value$; break;
    case 18: mastershipStatus = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
}
