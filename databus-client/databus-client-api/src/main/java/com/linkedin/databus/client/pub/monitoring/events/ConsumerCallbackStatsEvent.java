/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.databus.client.pub.monitoring.events;
/*
 *
 * Copyright 2013 LinkedIn Corp. All rights reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
*/


@SuppressWarnings("all")
/** Consumer callback statistics (streaming and bootstrap) */
public class ConsumerCallbackStatsEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"ConsumerCallbackStatsEvent\",\"namespace\":\"com.linkedin.databus.client.pub.monitoring.events\",\"fields\":[{\"name\":\"ownerId\",\"type\":\"int\",\"doc\":\"The id of the owner that generated the event\"},{\"name\":\"timestampCreationMs\",\"type\":\"long\",\"doc\":\"unix timestamp of the last reset() call\"},{\"name\":\"timestampLastResetMs\",\"type\":\"long\",\"doc\":\"time in ms since the last reset() call\"},{\"name\":\"timestampLastMergeMs\",\"type\":\"long\",\"doc\":\"time in ms since the last merge call\"},{\"name\":\"dimension\",\"type\":\"string\",\"doc\":\"dimension\"},{\"name\":\"numEventsReceived\",\"type\":\"long\",\"doc\":\"number of events received by consumer\"},{\"name\":\"numEventsProcessed\",\"type\":\"long\",\"doc\":\"number of events processed by consumer\"},{\"name\":\"numDataEventsReceived\",\"type\":\"long\",\"doc\":\"number of data events received by consumer\"},{\"name\":\"numDataEventsProcessed\",\"type\":\"long\",\"doc\":\"number of data events processed by consumer\"},{\"name\":\"numSysEventsReceived\",\"type\":\"long\",\"doc\":\"number of end of window events received \"},{\"name\":\"numSysEventsProcessed\",\"type\":\"long\",\"doc\":\"number of end of window events processed\"},{\"name\":\"minSeenWinScn\",\"type\":\"long\",\"doc\":\"the minimum window scn seen by the dispatcher\"},{\"name\":\"maxSeenWinScn\",\"type\":\"long\",\"doc\":\"the maximum window scn seen by the dispatcher\"},{\"name\":\"numErrorsReceived\",\"type\":\"long\",\"doc\":\"number of erroneous events received\"},{\"name\":\"numErrorsProcessed\",\"type\":\"long\",\"doc\":\"number of erroneous events processed\"},{\"name\":\"numSysErrorsProcessed\",\"type\":\"long\",\"doc\":\"number of erroneous end of window events processed\"},{\"name\":\"numDataErrorsProcessed\",\"type\":\"long\",\"doc\":\"number of erroneous data events processed\"},{\"name\":\"latencyEventsProcessed\",\"type\":\"long\",\"doc\":\"average latency of processing an event\"},{\"name\":\"timestampLastEventReceived\",\"type\":\"long\",\"doc\":\"timestamp at which last event was received\"},{\"name\":\"timestampLastEventProcessed\",\"type\":\"long\",\"doc\":\"timestamp at which last event was processed\"},{\"name\":\"timestampOfLastEventReceived\",\"type\":\"long\",\"doc\":\"timestamp of last data event received\"},{\"name\":\"timestampOfLastEventProcessed\",\"type\":\"long\",\"doc\":\"timestamp of last data  event received\"},{\"name\":\"scnOfLastEventProcessed\",\"type\":\"long\",\"doc\":\"scn of last data event processed by the consumer\"},{\"name\":\"maxSeenWinTimestamp\",\"type\":\"long\",\"doc\":\"the maximum window scn seen by the dispatcher\"}]}");
  /** The id of the owner that generated the event */
  public int ownerId;
  /** unix timestamp of the last reset() call */
  public long timestampCreationMs;
  /** time in ms since the last reset() call */
  public long timestampLastResetMs;
  /** time in ms since the last merge call */
  public long timestampLastMergeMs;
  /** dimension */
  public java.lang.CharSequence dimension;
  /** number of events received by consumer */
  public long numEventsReceived;
  /** number of events processed by consumer */
  public long numEventsProcessed;
  /** number of data events received by consumer */
  public long numDataEventsReceived;
  /** number of data events processed by consumer */
  public long numDataEventsProcessed;
  /** number of end of window events received  */
  public long numSysEventsReceived;
  /** number of end of window events processed */
  public long numSysEventsProcessed;
  /** the minimum window scn seen by the dispatcher */
  public long minSeenWinScn;
  /** the maximum window scn seen by the dispatcher */
  public long maxSeenWinScn;
  /** number of erroneous events received */
  public long numErrorsReceived;
  /** number of erroneous events processed */
  public long numErrorsProcessed;
  /** number of erroneous end of window events processed */
  public long numSysErrorsProcessed;
  /** number of erroneous data events processed */
  public long numDataErrorsProcessed;
  /** average latency of processing an event */
  public long latencyEventsProcessed;
  /** timestamp at which last event was received */
  public long timestampLastEventReceived;
  /** timestamp at which last event was processed */
  public long timestampLastEventProcessed;
  /** timestamp of last data event received */
  public long timestampOfLastEventReceived;
  /** timestamp of last data  event received */
  public long timestampOfLastEventProcessed;
  /** scn of last data event processed by the consumer */
  public long scnOfLastEventProcessed;
  /** the maximum window scn seen by the dispatcher */
  public long maxSeenWinTimestamp;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ownerId;
    case 1: return timestampCreationMs;
    case 2: return timestampLastResetMs;
    case 3: return timestampLastMergeMs;
    case 4: return dimension;
    case 5: return numEventsReceived;
    case 6: return numEventsProcessed;
    case 7: return numDataEventsReceived;
    case 8: return numDataEventsProcessed;
    case 9: return numSysEventsReceived;
    case 10: return numSysEventsProcessed;
    case 11: return minSeenWinScn;
    case 12: return maxSeenWinScn;
    case 13: return numErrorsReceived;
    case 14: return numErrorsProcessed;
    case 15: return numSysErrorsProcessed;
    case 16: return numDataErrorsProcessed;
    case 17: return latencyEventsProcessed;
    case 18: return timestampLastEventReceived;
    case 19: return timestampLastEventProcessed;
    case 20: return timestampOfLastEventReceived;
    case 21: return timestampOfLastEventProcessed;
    case 22: return scnOfLastEventProcessed;
    case 23: return maxSeenWinTimestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ownerId = (java.lang.Integer)value$; break;
    case 1: timestampCreationMs = (java.lang.Long)value$; break;
    case 2: timestampLastResetMs = (java.lang.Long)value$; break;
    case 3: timestampLastMergeMs = (java.lang.Long)value$; break;
    case 4: dimension = (java.lang.CharSequence)value$; break;
    case 5: numEventsReceived = (java.lang.Long)value$; break;
    case 6: numEventsProcessed = (java.lang.Long)value$; break;
    case 7: numDataEventsReceived = (java.lang.Long)value$; break;
    case 8: numDataEventsProcessed = (java.lang.Long)value$; break;
    case 9: numSysEventsReceived = (java.lang.Long)value$; break;
    case 10: numSysEventsProcessed = (java.lang.Long)value$; break;
    case 11: minSeenWinScn = (java.lang.Long)value$; break;
    case 12: maxSeenWinScn = (java.lang.Long)value$; break;
    case 13: numErrorsReceived = (java.lang.Long)value$; break;
    case 14: numErrorsProcessed = (java.lang.Long)value$; break;
    case 15: numSysErrorsProcessed = (java.lang.Long)value$; break;
    case 16: numDataErrorsProcessed = (java.lang.Long)value$; break;
    case 17: latencyEventsProcessed = (java.lang.Long)value$; break;
    case 18: timestampLastEventReceived = (java.lang.Long)value$; break;
    case 19: timestampLastEventProcessed = (java.lang.Long)value$; break;
    case 20: timestampOfLastEventReceived = (java.lang.Long)value$; break;
    case 21: timestampOfLastEventProcessed = (java.lang.Long)value$; break;
    case 22: scnOfLastEventProcessed = (java.lang.Long)value$; break;
    case 23: maxSeenWinTimestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
}
