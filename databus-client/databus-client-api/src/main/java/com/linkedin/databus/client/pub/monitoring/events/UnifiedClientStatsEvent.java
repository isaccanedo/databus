/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
/*
 * Copyright 2013 LinkedIn Corp. All rights reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.linkedin.databus.client.pub.monitoring.events;

@SuppressWarnings("all")
/** Client stats, both inbound/puller (from relay and bootstrap) and outbound/dispatcher (to consumer via callbacks).  Manually run 'ant -f build.xml' in schemas_registry/monitoring/client to generate UnifiedClientStatsEvent.java from UnifiedClientStatsEvent.1.avsc. */
public class UnifiedClientStatsEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"UnifiedClientStatsEvent\",\"namespace\":\"com.linkedin.databus.client.pub.monitoring.events\",\"fields\":[{\"name\":\"ownerId\",\"type\":\"int\",\"doc\":\"ID of the owner that generated the event\"},{\"name\":\"dimension\",\"type\":\"string\",\"doc\":\"namespace component for autometrics/monitoring\"},{\"name\":\"timestampLastResetMs\",\"type\":\"long\",\"doc\":\"timestamp (ms) of the last reset() call\"},{\"name\":\"aggregated\",\"type\":\"boolean\",\"doc\":\"flag indicating that this is an aggregated (not lowest-level) set of stats\"},{\"name\":\"curBootstrappingPartitions\",\"type\":\"int\",\"doc\":\"number of partitions (or tables) currently bootstrapping\"},{\"name\":\"curDeadConnections\",\"type\":\"int\",\"doc\":\"number of connections (per-table or per-partition) currently suspended/dead\"},{\"name\":\"numConsumerErrors\",\"type\":\"long\",\"doc\":\"number of errors returned by consumer callbacks (i.e., by application code) across all partitions or tables\"},{\"name\":\"numDataEvents\",\"type\":\"long\",\"doc\":\"number of data events received by the Databus client library\"},{\"name\":\"timestampOfLastHeartbeatMs\",\"type\":\"long\",\"doc\":\"timestamp (ms) of the most recent 'heartbeat' from the relay or bootstrap puller; indicates connection is still alive\"},{\"name\":\"timestampLastDataEventWasReceivedMs\",\"type\":\"long\",\"doc\":\"timestamp (ms) of receipt of the most recent event (when aggregated, receipt time of event with oldest source-DB commit time across all partitions)\"}]}");
  /** ID of the owner that generated the event */
  public int ownerId;
  /** namespace component for autometrics/monitoring */
  public java.lang.CharSequence dimension;
  /** timestamp (ms) of the last reset() call */
  public long timestampLastResetMs;
  /** flag indicating that this is an aggregated (not lowest-level) set of stats */
  public boolean aggregated;
  /** number of partitions (or tables) currently bootstrapping */
  public int curBootstrappingPartitions;
  /** number of connections (per-table or per-partition) currently suspended/dead */
  public int curDeadConnections;
  /** number of errors returned by consumer callbacks (i.e., by application code) across all partitions or tables */
  public long numConsumerErrors;
  /** number of data events received by the Databus client library */
  public long numDataEvents;
  /** timestamp (ms) of the most recent 'heartbeat' from the relay or bootstrap puller; indicates connection is still alive */
  public long timestampOfLastHeartbeatMs;
  /** timestamp (ms) of receipt of the most recent event (when aggregated, receipt time of event with oldest source-DB commit time across all partitions) */
  public long timestampLastDataEventWasReceivedMs;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ownerId;
    case 1: return dimension;
    case 2: return timestampLastResetMs;
    case 3: return aggregated;
    case 4: return curBootstrappingPartitions;
    case 5: return curDeadConnections;
    case 6: return numConsumerErrors;
    case 7: return numDataEvents;
    case 8: return timestampOfLastHeartbeatMs;
    case 9: return timestampLastDataEventWasReceivedMs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ownerId = (java.lang.Integer)value$; break;
    case 1: dimension = (java.lang.CharSequence)value$; break;
    case 2: timestampLastResetMs = (java.lang.Long)value$; break;
    case 3: aggregated = (java.lang.Boolean)value$; break;
    case 4: curBootstrappingPartitions = (java.lang.Integer)value$; break;
    case 5: curDeadConnections = (java.lang.Integer)value$; break;
    case 6: numConsumerErrors = (java.lang.Long)value$; break;
    case 7: numDataEvents = (java.lang.Long)value$; break;
    case 8: timestampOfLastHeartbeatMs = (java.lang.Long)value$; break;
    case 9: timestampLastDataEventWasReceivedMs = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
}
